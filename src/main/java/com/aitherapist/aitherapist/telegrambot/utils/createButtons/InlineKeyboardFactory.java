package com.aitherapist.aitherapist.telegrambot.utils.createButtons;

import com.aitherapist.aitherapist.domain.enums.Roles;
import com.aitherapist.aitherapist.domain.model.entities.Doctor;
import com.aitherapist.aitherapist.domain.model.entities.Patient;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

import java.util.*;

public class InlineKeyboardFactory {

    public static InlineKeyboardMarkup createBackToMainMenuKeyboard() {
        Map<String, String> buttonMap = new LinkedHashMap<>();
        buttonMap.put("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "/clinicPatientMenu");
        return createInlineKeyboard(buttonMap, 1);
    }
    public static InlineKeyboardMarkup createInlineKeyboard(Map<String, String> buttonMap, int buttonsPerRow) {
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        if (buttonsPerRow < 1) buttonsPerRow = 1;

        List<InlineKeyboardButton> currentRow = new ArrayList<>();
        for (Map.Entry<String, String> entry : buttonMap.entrySet()) {
            InlineKeyboardButton button = new InlineKeyboardButton();
            button.setText(entry.getKey());
            button.setCallbackData(entry.getValue());

            currentRow.add(button);
            if (currentRow.size() == buttonsPerRow) {
                keyboard.add(currentRow);
                currentRow = new ArrayList<>();
            }
        }

        if (!currentRow.isEmpty()) {
            keyboard.add(currentRow);
        }

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        markup.setKeyboard(keyboard);
        return markup;
    }

    public static InlineKeyboardMarkup createDoctorDefaultKeyboard() {
        Map<String, String> buttonMap = new LinkedHashMap<>();
        buttonMap.put("üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç—É", "/sendMessageToPatient");
        buttonMap.put("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "/settingsDoctor");
        buttonMap.put("üìÖ –ü–∞—Ü–∏–µ–Ω—Ç—ã ", "/patientHistory");
        buttonMap.put("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", "/DoctorProfile");
        return createInlineKeyboard(buttonMap, 2);
    }

    public static InlineKeyboardMarkup createDoctorSettingsKeyboard() {
        Map<String, String> buttonMap = new LinkedHashMap<>();
        buttonMap.put("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", "/editDoctorAccountData");
        buttonMap.put("üîÑ –°–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "/changeRole");
        buttonMap.put("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "/acceptInitData");
        return createInlineKeyboard(buttonMap, 2);
    }

    public static InlineKeyboardMarkup createPatientSettingsKeyboard() {
        Map<String, String> buttonMap = new LinkedHashMap<>();
        buttonMap.put("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", "/editPatientAccountData");
        buttonMap.put("üîÑ –°–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "/changeRole");
        buttonMap.put("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "/clinicPatientMenu");


        return createInlineKeyboard(buttonMap, 2);
    }




    public static InlineKeyboardMarkup createEditClinicPatientData() {
        Map<String, String> buttons = new LinkedHashMap<>();
        buttons.put("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", "/editName");
        buttons.put("üéÇ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è", "/editBirthDate");
        buttons.put("‚ößÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª", "/editGender");
        buttons.put("‚ù§Ô∏è –ê—Ä–∏—Ç–º–∏—è", "/editArrhythmia");
        buttons.put("üè• –•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è", "/editChronicDiseases");
        buttons.put("üìè –†–æ—Å—Ç", "/editHeight");
        buttons.put("‚öñÔ∏è –í–µ—Å", "/editWeight");
        buttons.put("üö¨ –í—Ä–µ–¥–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏", "/editBadHabits");

        return InlineKeyboardFactory.createInlineKeyboard(buttons, 2);
    }

    public static InlineKeyboardMarkup createEditDoctorData() {
        Map<String, String> buttons = new LinkedHashMap<>();
        buttons.put("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", "/editName");
        buttons.put("üéÇ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è", "/editBirthDate");
        buttons.put("‚ößÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª", "/editGender");

        return InlineKeyboardFactory.createInlineKeyboard(buttons, 2);
    }

    public static InlineKeyboardMarkup createPatientManagementKeyboard() {
        Map<String, String> buttonMap = new LinkedHashMap<>();
        buttonMap.put("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–∞", "/addPatient");
        return createInlineKeyboard(buttonMap, 2);
    }

    public static InlineKeyboardMarkup createBackToMenuButtonClinic(){
        Map<String, String> buttonMap = new LinkedHashMap<>();
        buttonMap.put("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "/clinicPatientMenu");
        return createInlineKeyboard(buttonMap, 2);
    }



    public static InlineKeyboardMarkup createPatientDefaultKeyboard(Patient patient) {
        Map<String, String> buttonMap = new LinkedHashMap<>();
        buttonMap.put("üìä –í–≤–µ—Å—Ç–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", "/inputDailyData");
        if(patient.getRole() == Roles.CLINIC_PATIENT){
            buttonMap.put("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –¥–æ–∫—Ç–æ—Ä—É", "/writeToDoctor");
        }
        buttonMap.put("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", "/myProfile");
        buttonMap.put("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "/patientSettings");
        buttonMap.put("üìà –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π", "/myHealthHistory");
        buttonMap.put("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", "/QAMode");
        return createInlineKeyboard(buttonMap, 2);
    }

    public static InlineKeyboardMarkup createAcceptOrEditKeyboardPatient() {
        Map<String, String> buttons = new LinkedHashMap<>();
        buttons.put("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", "/clinicPatientMenu");
        buttons.put("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", "/editPatientMedicalData");
        return createInlineKeyboard(buttons, 2);
    }



    public static InlineKeyboardMarkup createAcceptOrEditKeyboard() {
        Map<String, String> buttons = new LinkedHashMap<>();
        buttons.put("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", "/acceptInitData");
        buttons.put("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", "/editDoctorAccountData");
        return createInlineKeyboard(buttons, 2);
    }

    public static InlineKeyboardMarkup createDoctorProfileKeyboard() {
        return new InlineKeyboardMarkup(List.of(
                List.of(
                        InlineKeyboardButton.builder()
                                .text("üìä –ú–æ–∏ –ø–∞—Ü–∏–µ–Ω—Ç—ã")
                                .callbackData("/patientHistory")
                                .build()
                ),
                List.of(
                        InlineKeyboardButton.builder()
                                .text("üîô –ù–∞–∑–∞–¥")
                                .callbackData("/acceptInitData")
                                .build()
                )
        ));
    }

    public static InlineKeyboardMarkup createPatientsKeyboard(List<Patient> patients) {
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        for (Patient patient : patients) {
            InlineKeyboardButton button = new InlineKeyboardButton();
            button.setText("üí¨ " + patient.getName());
            button.setCallbackData("/sendMessageToPatient " + patient.getTelegramId());
            keyboard.add(Collections.singletonList(button));
        }

        InlineKeyboardButton cancelButton = new InlineKeyboardButton();
        cancelButton.setText("‚ùå –û—Ç–º–µ–Ω–∞");
        cancelButton.setCallbackData("/acceptInitData");
        keyboard.add(Collections.singletonList(cancelButton));

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        markup.setKeyboard(keyboard);
        return markup;
    }

    public static InlineKeyboardMarkup createDoctorsKeyboard(List<Doctor> doctors) {
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        for (Doctor doctor : doctors) {
            InlineKeyboardButton button = new InlineKeyboardButton();
            button.setText("üí¨ " + doctor.getName());
            button.setCallbackData("/sendMessageDoctor " + doctor.getTelegramId());
            keyboard.add(Collections.singletonList(button));
        }

        InlineKeyboardButton cancelButton = new InlineKeyboardButton();
        cancelButton.setText("‚ùå –û—Ç–º–µ–Ω–∞");
        cancelButton.setCallbackData("/acceptInitData");
        keyboard.add(Collections.singletonList(cancelButton));

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        markup.setKeyboard(keyboard);
        return markup;
    }

    public static InlineKeyboardMarkup createProfileKeyboard() {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();

        List<InlineKeyboardButton> row1 = List.of(
                InlineKeyboardButton.builder()
                        .text("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
                        .callbackData("/editParameters")
                        .build(),
                InlineKeyboardButton.builder()
                        .text("üìä –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
                        .callbackData("/myHealthHistory")
                        .build()
        );


        markup.setKeyboard(List.of(row1));
        return markup;
    }
}