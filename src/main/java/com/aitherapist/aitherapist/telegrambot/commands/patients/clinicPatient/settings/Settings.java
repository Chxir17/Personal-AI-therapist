package com.aitherapist.aitherapist.telegrambot.commands.patients.clinicPatient.settings;

import com.aitherapist.aitherapist.domain.enums.Status;
import com.aitherapist.aitherapist.domain.model.entities.MedicalNormalData;
import com.aitherapist.aitherapist.domain.model.entities.User;
import com.aitherapist.aitherapist.services.NotificationServiceImpl;
import com.aitherapist.aitherapist.services.UserServiceImpl;
import com.aitherapist.aitherapist.telegrambot.ITelegramExecutor;
import com.aitherapist.aitherapist.telegrambot.commands.ICommand;
import com.aitherapist.aitherapist.telegrambot.messageshandler.contexts.RegistrationContext;
import com.aitherapist.aitherapist.telegrambot.utils.TelegramIdUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;

@Component
public class Settings implements ICommand {

    private final UserServiceImpl userService;
    private final NotificationServiceImpl notificationService;
    private final ITelegramExecutor telegramExecutor;
    private final RegistrationContext registrationContext;

    @Autowired
    public Settings(UserServiceImpl userService,
                    NotificationServiceImpl notificationService,
                    @Lazy ITelegramExecutor telegramExecutor,
                    RegistrationContext registrationContext) {
        this.userService = userService;
        this.notificationService = notificationService;
        this.telegramExecutor = telegramExecutor;
        this.registrationContext = registrationContext;
    }

    @Override
    public SendMessage apply(Update update, RegistrationContext registrationContext) throws TelegramApiException {
        Long userId = TelegramIdUtils.extractUserId(update);
        Long chatId = TelegramIdUtils.getChatId(update);

        User user = userService.fetchUserByTelegramId(userId);
        if (user == null) {
            return SendMessage.builder()
                    .chatId(chatId.toString())
                    .text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    .build();
        }

        registrationContext.setStatus(userId, Status.NOTIFICATION_SETTINGS);


        String messageText = buildSettingsMessage(user, userId);
        InlineKeyboardMarkup keyboard = buildSettingsKeyboard(user);

        if (update.hasCallbackQuery()) {
            Integer messageId = update.getCallbackQuery().getMessage().getMessageId();
            try {

                telegramExecutor.editMessageText(
                        chatId.toString(),
                        messageId,
                        messageText,
                        keyboard
                );
                return null;
            } catch (TelegramApiException e) {
                return SendMessage.builder()
                        .chatId(chatId.toString())
                        .text(messageText)
                        .parseMode("HTML")
                        .replyMarkup(keyboard)
                        .build();
            }
        }

        return SendMessage.builder()
                .chatId(chatId.toString())
                .text(messageText)
                .parseMode("HTML")
                .replyMarkup(keyboard)
                .build();
    }

    private String buildSettingsMessage(User user, Long userId) {
        boolean notificationsEnabled = notificationService.getNotificationEnabled(user);
        LocalTime notificationTime = notificationService.getNotificationTime(user);
        String customMessage = notificationService.getMessage(user);
        MedicalNormalData medicalData = registrationContext.getMedicalNormalData(userId);

        return "‚ú® –í–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –Ω–æ—Ä–º–∞—Ç–∏–≤—ã ‚ú®\n\n" +
                "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n" +
                "üîî  –°—Ç–∞—Ç—É—Å: " + (notificationsEnabled ? "–í–ö–õ ‚úÖ" : "–í–´–ö–õ ‚ùå") + "\n" +
                "‚è∞  –í—Ä–µ–º—è: " + (notificationTime != null ?
                notificationTime.format(DateTimeFormatter.ofPattern("HH:mm")) : "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ") + "\n" +
                "üìù  –¢–µ–∫—Å—Ç: " + (customMessage != null ? customMessage : "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω") + "\n\n\n" +
                "ü©∫ –í–∞—à–∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –Ω–æ—Ä–º–∞—Ç–∏–≤—ã\n" +
                "üí§  –°–æ–Ω: " + String.format("%.1f", medicalData.getHoursOfSleepToday()) + " —á/—Å—É—Ç–∫–∏\n" +
                "‚ù§Ô∏è  –ü—É–ª—å—Å: " + medicalData.getPulse() + " —É–¥/–º–∏–Ω\n" +
                "ü©∏  –î–∞–≤–ª–µ–Ω–∏–µ: " + medicalData.getPressure() + "\n\n\n" +
                "–≠—Ç–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å üíô";
    }

    private InlineKeyboardMarkup buildSettingsKeyboard(User user) {
        boolean notificationsEnabled = notificationService.getNotificationEnabled(user);

        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        rows.add(List.of(
                InlineKeyboardButton.builder()
                        .text("‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è")
                        .callbackData("/setNotificationTime")
                        .build(),
                InlineKeyboardButton.builder()
                        .text(notificationsEnabled ? "üîï –í—ã–∫–ª—é—á–∏—Ç—å" : "üîî –í–∫–ª—é—á–∏—Ç—å")
                        .callbackData("/toggleNotification")
                        .build()
        ));

        rows.add(List.of(
                InlineKeyboardButton.builder()
                        .text("üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç")
                        .callbackData("/setNotificationMessage")
                        .build(),
                InlineKeyboardButton.builder()
                        .text("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
                        .callbackData("/editPatientMedicalData")
                        .build()
        ));

        return InlineKeyboardMarkup.builder().keyboard(rows).build();
    }
}