package com.aitherapist.aitherapist.telegrambot.commands.patients.clinicPatient;

import com.aitherapist.aitherapist.domain.model.entities.ClinicPatient;
import com.aitherapist.aitherapist.domain.model.entities.InitialHealthData;
import com.aitherapist.aitherapist.services.UserServiceImpl;
import com.aitherapist.aitherapist.telegrambot.commands.ICommand;
import com.aitherapist.aitherapist.telegrambot.messageshandler.contexts.RegistrationContext;
import com.aitherapist.aitherapist.telegrambot.utils.TelegramIdUtils;
import com.aitherapist.aitherapist.telegrambot.utils.createButtons.InlineKeyboardFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.time.LocalDate;
import java.time.Period;

@Component
public class Profile implements ICommand {

    private final UserServiceImpl userService;

    @Autowired
    public Profile(UserServiceImpl userService) {
        this.userService = userService;
    }

    @Override
    @Transactional(readOnly = true)
    public SendMessage apply(Update update, RegistrationContext registrationContext) throws TelegramApiException {
        Long userId = TelegramIdUtils.extractUserId(update);
        Long chatId = TelegramIdUtils.getChatId(update);

        ClinicPatient patient = userService.getClinicPatientById(userId);
        if (patient == null) {
            return SendMessage.builder()
                    .chatId(chatId.toString())
                    .text("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    .build();
        }

        InitialHealthData initialData = patient.getInitialData();

        StringBuilder message = new StringBuilder();
        message.append("üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*\n\n");

        message.append("üìù *–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n");
        message.append(String.format("‚Ä¢ –ò–º—è: %s\n", patient.getName()));
        message.append(String.format("‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: %d –ª–µ—Ç\n", patient.getAge()));
        message.append(String.format("‚Ä¢ –ü–æ–ª: %s\n", patient.getGender() ? "–ú—É–∂—Å–∫–æ–π" : "–ñ–µ–Ω—Å–∫–∏–π"));
        message.append(String.format("‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: %s\n", patient.getPhoneNumber()));
        message.append(String.format("‚Ä¢ –ù–æ–º–µ—Ä –º–µ–¥–∫–∞—Ä—Ç—ã: %s\n\n", patient.getMedicalCardNumber() != null ? patient.getMedicalCardNumber() : "–Ω–µ —É–∫–∞–∑–∞–Ω"));

        message.append("ü©∫ *–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ:*\n");
        if (initialData != null) {
            message.append(String.format("‚Ä¢ –†–æ—Å—Ç: %.1f —Å–º\n", initialData.getHeight()));
            message.append(String.format("‚Ä¢ –í–µ—Å: %.1f –∫–≥\n", initialData.getWeight()));
            message.append(String.format("‚Ä¢ –•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è: %s\n",
                    initialData.getChronicDiseases() != null ? initialData.getChronicDiseases() : "–Ω–µ—Ç"));
            message.append(String.format("‚Ä¢ –í—Ä–µ–¥–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏: %s\n",
                    initialData.getBadHabits() != null ? initialData.getBadHabits() : "–Ω–µ—Ç"));
            message.append(String.format("‚Ä¢ –ë–æ–ª–∏ –≤ —Å–µ—Ä–¥—Ü–µ: %s\n",
                    initialData.getHeartPain() != null ? (initialData.getHeartPain() ? "–¥–∞" : "–Ω–µ—Ç") : "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"));
            message.append(String.format("‚Ä¢ –ê—Ä–∏—Ç–º–∏—è: %s\n",
                    initialData.getArrhythmia() != null ? (initialData.getArrhythmia() ? "–¥–∞" : "–Ω–µ—Ç") : "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"));
        } else {
            message.append("–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã\n");
        }

        return SendMessage.builder()
                .chatId(chatId.toString())
                .text(message.toString())
                .parseMode("MarkdownV2")
                .replyMarkup(InlineKeyboardFactory.createProfileKeyboard())
                .build();
    }
}