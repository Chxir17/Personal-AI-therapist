package com.aitherapist.aitherapist.telegrambot.commands.patients.clinicPatient;

import com.aitherapist.aitherapist.domain.enums.Roles;
import com.aitherapist.aitherapist.domain.model.entities.ClinicPatient;
import com.aitherapist.aitherapist.domain.model.entities.Doctor;
import com.aitherapist.aitherapist.domain.model.entities.InitialHealthData;
import com.aitherapist.aitherapist.domain.model.entities.Patient;
import com.aitherapist.aitherapist.services.UserServiceImpl;
import com.aitherapist.aitherapist.telegrambot.ITelegramExecutor;
import com.aitherapist.aitherapist.telegrambot.commands.ICommand;
import com.aitherapist.aitherapist.telegrambot.messageshandler.contexts.RegistrationContext;
import com.aitherapist.aitherapist.telegrambot.utils.CommandAccess;
import com.aitherapist.aitherapist.telegrambot.utils.TelegramIdUtils;
import com.aitherapist.aitherapist.telegrambot.utils.createButtons.InlineKeyboardFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

@Component
@CommandAccess(allowedRoles = {Roles.CLINIC_PATIENT, Roles.BOT_PATIENT}, requiresRegistration = true)
public class Profile implements ICommand {

    private final UserServiceImpl userService;

    @Autowired
    public Profile(UserServiceImpl userService) {
        this.userService = userService;
    }

    @Override
    @Transactional(readOnly = true)
    public SendMessage apply(Update update, RegistrationContext registrationContext, ITelegramExecutor telegramExecutor) throws TelegramApiException {
        Long userId = TelegramIdUtils.extractUserId(update);
        Long chatId = TelegramIdUtils.getChatId(update);

        Roles role = userService.getUserRoles(userId);
        Patient patient = role == Roles.CLINIC_PATIENT
                ? userService.getClinicPatientById(userId)
                : userService.getNonClinicPatientById(userId);

        if (patient == null) {
            return buildErrorMessage(chatId);
        }

        String messageText = buildProfileMessageText(patient);
        InlineKeyboardMarkup keyboard = InlineKeyboardFactory.createProfileKeyboard();

        if (update.hasCallbackQuery()) {
            Integer messageId = update.getCallbackQuery().getMessage().getMessageId();
            try {
                telegramExecutor.editMessageText(
                        chatId.toString(),
                        messageId,
                        messageText,
                        keyboard
                );
                return null;
            } catch (TelegramApiException e) {
                return SendMessage.builder()
                        .chatId(chatId.toString())
                        .text(messageText)
                        .parseMode("HTML")
                        .replyMarkup(keyboard)
                        .build();
            }
        }

        return SendMessage.builder()
                .chatId(chatId.toString())
                .text(messageText)
                .parseMode("HTML")
                .replyMarkup(keyboard)
                .build();
    }

    private SendMessage buildErrorMessage(Long chatId) {
        return SendMessage.builder()
                .chatId(chatId.toString())
                .text("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                .build();
    }

    private String buildProfileMessageText(Patient patient) {
        InitialHealthData initialData = patient.getInitialData();
        String doctorInfo = "";

        if (patient instanceof ClinicPatient clinicPatient) {
            if (!clinicPatient.getDoctors().isEmpty()) {
                StringBuilder doctorsBuilder = new StringBuilder("\nüë®‚öïÔ∏è –í–∞—à–∏ –≤—Ä–∞—á–∏:\n");
                for (Doctor doctor : clinicPatient.getDoctors()) {
                    doctorsBuilder.append(String.format(
                            "‚îú %s (%s)\n",
                            doctor.getName(),
                            doctor.getLicenseNumber() != null ? "–ª–∏—Ü. " + doctor.getLicenseNumber() : "–ª–∏—Ü–µ–Ω–∑–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
                    ));
                }
                doctorInfo = doctorsBuilder.toString();
            } else {
                doctorInfo = "\nüë®‚öïÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö –≤—Ä–∞—á–µ–π";
            }
        }

        return String.format(
                """
                üè• –í–∞—à –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å
                
                üë§ –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                ‚îú –ò–º—è: %s
                ‚îú –í–æ–∑—Ä–∞—Å—Ç: %d –ª–µ—Ç
                ‚îú –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: %s
                ‚îî –ü–æ–ª: %s
                
                ü©∫ –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
                %s
                %s
                
                ‚úèÔ∏è –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è
                """,
                patient.getName(),
                patient.getAge(),
                patient.getPhoneNumber(),
                patient.getGender() ? "–ú—É–∂—Å–∫–æ–π ‚ôÇ" : "–ñ–µ–Ω—Å–∫–∏–π ‚ôÄ",
                buildHealthDataSection(initialData),
                doctorInfo
        );
    }

    private String buildHealthDataSection(InitialHealthData initialData) {
        if (initialData == null) {
            return "‚îî –î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã";
        }

        return String.format(
                """
                ‚îú –†–æ—Å—Ç: %.1f —Å–º
                ‚îú –í–µ—Å: %.1f –∫–≥
                ‚îú –•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è: %s
                ‚îú –í—Ä–µ–¥–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏: %s
                ‚îú –ë–æ–ª–∏ –≤ —Å–µ—Ä–¥—Ü–µ: %s
                """,
                initialData.getHeight(),
                initialData.getWeight(),
                formatNullable(initialData.getChronicDiseases(), "–Ω–µ—Ç"),
                formatNullable(initialData.getBadHabits(), "–Ω–µ—Ç"),
                formatBoolean(initialData.getHeartPain(), "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
        );
    }

    private String formatNullable(String value, String defaultValue) {
        return value == null || value.isEmpty() || value.equals("false") ? defaultValue : value;
    }

    private String formatBoolean(Boolean value, String defaultValue) {
        if (value == null) return defaultValue;
        return value ? "–¥–∞" : "–Ω–µ—Ç";
    }
}