package com.aitherapist.aitherapist.telegrambot.commands.doctors;

import com.aitherapist.aitherapist.domain.enums.Roles;
import com.aitherapist.aitherapist.domain.model.entities.DailyHealthData;
import com.aitherapist.aitherapist.domain.model.entities.Patient;
import com.aitherapist.aitherapist.services.PatientServiceImpl;
import com.aitherapist.aitherapist.telegrambot.ITelegramExecutor;
import com.aitherapist.aitherapist.telegrambot.commands.ICommand;
import com.aitherapist.aitherapist.telegrambot.messageshandler.contexts.RegistrationContext;
import com.aitherapist.aitherapist.telegrambot.utils.TelegramIdUtils;
import com.aitherapist.aitherapist.telegrambot.utils.createButtons.InlineKeyboardFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.Comparator;
import java.util.List;


@Component
public class GetPatientDailyData implements ICommand {

    private final PatientServiceImpl patientService;
    @Autowired
    public GetPatientDailyData(PatientServiceImpl patientService) {
        this.patientService = patientService;
    }

    @Override
    @Transactional(readOnly = true)
    public SendMessage apply(Update update, RegistrationContext registrationContext, ITelegramExecutor telegramExecutor) throws TelegramApiException {
        try {
            String callbackData = update.getCallbackQuery().getData();
            String[] parts = callbackData.split(" ");
            if (parts.length < 2) {
                throw new IllegalArgumentException("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã");
            }

            Long patientId = Long.parseLong(parts[1]);
            Long chatId = TelegramIdUtils.getChatId(update);

            Patient patient = patientService.findById(patientId);
            if (patient == null) {
                return new SendMessage(chatId.toString(), "‚ùå –ü–∞—Ü–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω");
            }

            List<DailyHealthData> healthData = patientService.getPatientDailyHealthData(patientId);

            StringBuilder message = new StringBuilder();
            message.append(String.format("üìä <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞:</b> %s\n\n", patient.getName()));

            if (healthData.isEmpty()) {
                message.append("–£ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –∑–¥–æ—Ä–æ–≤—å–µ.");
            } else {
                for (DailyHealthData data : healthData) {
                    message.append(formatHealthData(data));
                }
            }

            SendMessage response = new SendMessage(chatId.toString(), message.toString());
            response.enableHtml(true);
            response.setReplyMarkup(InlineKeyboardFactory.createReturnToMenu());
            return response;
        } catch (NumberFormatException e) {
            Long chatId = TelegramIdUtils.getChatId(update);
            return new SendMessage(chatId.toString(), "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø–∞—Ü–∏–µ–Ω—Ç–∞");
        } catch (Exception e) {
            Long chatId = TelegramIdUtils.getChatId(update);
            return new SendMessage(chatId.toString(), "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö");
        }
    }

    private String formatHealthData(DailyHealthData data) {
        return String.format(
                "<b>–ò–º—è:</b> %s, –Ω–æ–º–µ—Ä %d\n" +
                        "üå° <b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</b> %s\n" +
                        "‚ù§Ô∏è <b>–ü—É–ª—å—Å:</b> %s\n" +
                        "ü©∏ <b>–î–∞–≤–ª–µ–Ω–∏–µ:</b> %s\n" +
                        "üò¥ <b>–°–æ–Ω:</b> %s\n" +
                        "üß™ <b>–ö–∏—Å–ª–æ—Ä–æ–¥:</b> %s\n\n",
                data.getPatient() != null ? data.getPatient().getName() : "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
                data.getId(),
                data.getTemperature() != null ? String.format("%.1f¬∞C", data.getTemperature()) : "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
                data.getPulse() != null ? data.getPulse() + " —É–¥/–º–∏–Ω" : "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
                data.getPressure() != null ? data.getPressure() : "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
                data.getHoursOfSleepToday() != null ? String.format("%.1f —á–∞—Å–æ–≤", data.getHoursOfSleepToday()) : "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
                data.getBloodOxygenLevel() != null ? String.format("%.1f%%", data.getBloodOxygenLevel()) : "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        );
    }
}